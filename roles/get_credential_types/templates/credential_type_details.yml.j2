###############################################################################
# auto-generated by aap-get-credential_types
# Total Count of Fetched Credential Types: {{ credential_type_list | length }}
{% if aap_hostname == 'https://ansibletower.example.com' %} {# replace the hostname with your ansible tower url #}
{% set managed_value = 'managed_by_tower' %}
{% else %}
{% set managed_value = 'managed' %}
{% endif %}
{% set tower_managed_credential_types = credential_type_list | selectattr(managed_value, "equalto", false) | list %}
# Total Count of Fetched User-managed Credential Types: {{ tower_managed_credential_types | length }}
# Ansible Automation Platform: https://{{ aap_hostname }}
# AAP Job ID: {{ tower_job_id }}
# Git User ID: {{ github_user_info.json.login }}
###############################################################################
# Below is the list of User-managed Credential Types:
---
controller_credential_types:
{% for credential_type in tower_managed_credential_types %}
- name: "{{ credential_type.name }}"
  description: "{{ credential_type.description }}"
  kind: "{{ credential_type.kind }}"
{% if 'inputs' in credential_type %}
  inputs:
    fields:
{% for field in credential_type.inputs.fields %}
      - id: "{{ field.id }}"
        type: "{{ field.type }}"
        label: "{{ field.label }}"
{% if field.secret is defined and field.secret  %}
        secret: true
{% endif %}
{% if field.help_text is defined %}
        help_text: "{{ field.help_text }}"
{% endif %}
{% endfor %}
{% if credential_type.inputs.required is defined %}
  required:
{% for required_field in credential_type.inputs.required %}
    - "{{ required_field }}"
{% endfor %}
{% endif %}
{% endif %}
{% if 'injectors' in credential_type %}
  injectors:
{% if 'extra_vars' in credential_type.injectors %}
    extra_vars:
{% for key, value in credential_type.injectors.extra_vars.items() %}
      {{ key }}: !unsafe "{{ value }}"
{% endfor %}
{% endif %}
{% if 'env' in credential_type.injectors %}
    env:
{% for key, value in credential_type.injectors.env.items() %}
      {{ key }}: !unsafe "{{ value }}"
{% endfor %}
{% endif %}
{% if 'file' in credential_type.injectors %}
    file:
{% for key, value in credential_type.injectors.file.items() %}
      {{ key }}: !unsafe "{{ value }}"
{% endfor %}
{% endif %}
{% endif %}

{% endfor %}

